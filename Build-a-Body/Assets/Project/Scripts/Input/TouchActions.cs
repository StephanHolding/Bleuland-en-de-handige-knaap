//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project/Scripts/Input/TouchActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchActions"",
    ""maps"": [
        {
            ""name"": ""Touchscreen"",
            ""id"": ""f76c1de9-9efa-49ca-b001-60928402972d"",
            ""actions"": [
                {
                    ""name"": ""FirstFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""0b32cb4c-71b8-48e0-86dd-adb40ac35d8c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""10709e03-a343-4cd9-b1f2-2a74abf97687"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnSecondFingerContact"",
                    ""type"": ""Button"",
                    ""id"": ""92fcc1de-8b6c-4adb-80d6-3a026c99fcc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d5d42467-542d-4e0b-b069-1ad4f46af09a"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c02b7aac-e526-42ef-9b10-0f54769d1950"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1841bd6-cd38-46a6-b5d8-cefc82446998"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnSecondFingerContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touchscreen
        m_Touchscreen = asset.FindActionMap("Touchscreen", throwIfNotFound: true);
        m_Touchscreen_FirstFingerPosition = m_Touchscreen.FindAction("FirstFingerPosition", throwIfNotFound: true);
        m_Touchscreen_SecondFingerPosition = m_Touchscreen.FindAction("SecondFingerPosition", throwIfNotFound: true);
        m_Touchscreen_OnSecondFingerContact = m_Touchscreen.FindAction("OnSecondFingerContact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touchscreen
    private readonly InputActionMap m_Touchscreen;
    private List<ITouchscreenActions> m_TouchscreenActionsCallbackInterfaces = new List<ITouchscreenActions>();
    private readonly InputAction m_Touchscreen_FirstFingerPosition;
    private readonly InputAction m_Touchscreen_SecondFingerPosition;
    private readonly InputAction m_Touchscreen_OnSecondFingerContact;
    public struct TouchscreenActions
    {
        private @TouchActions m_Wrapper;
        public TouchscreenActions(@TouchActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstFingerPosition => m_Wrapper.m_Touchscreen_FirstFingerPosition;
        public InputAction @SecondFingerPosition => m_Wrapper.m_Touchscreen_SecondFingerPosition;
        public InputAction @OnSecondFingerContact => m_Wrapper.m_Touchscreen_OnSecondFingerContact;
        public InputActionMap Get() { return m_Wrapper.m_Touchscreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchscreenActions set) { return set.Get(); }
        public void AddCallbacks(ITouchscreenActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Add(instance);
            @FirstFingerPosition.started += instance.OnFirstFingerPosition;
            @FirstFingerPosition.performed += instance.OnFirstFingerPosition;
            @FirstFingerPosition.canceled += instance.OnFirstFingerPosition;
            @SecondFingerPosition.started += instance.OnSecondFingerPosition;
            @SecondFingerPosition.performed += instance.OnSecondFingerPosition;
            @SecondFingerPosition.canceled += instance.OnSecondFingerPosition;
            @OnSecondFingerContact.started += instance.OnOnSecondFingerContact;
            @OnSecondFingerContact.performed += instance.OnOnSecondFingerContact;
            @OnSecondFingerContact.canceled += instance.OnOnSecondFingerContact;
        }

        private void UnregisterCallbacks(ITouchscreenActions instance)
        {
            @FirstFingerPosition.started -= instance.OnFirstFingerPosition;
            @FirstFingerPosition.performed -= instance.OnFirstFingerPosition;
            @FirstFingerPosition.canceled -= instance.OnFirstFingerPosition;
            @SecondFingerPosition.started -= instance.OnSecondFingerPosition;
            @SecondFingerPosition.performed -= instance.OnSecondFingerPosition;
            @SecondFingerPosition.canceled -= instance.OnSecondFingerPosition;
            @OnSecondFingerContact.started -= instance.OnOnSecondFingerContact;
            @OnSecondFingerContact.performed -= instance.OnOnSecondFingerContact;
            @OnSecondFingerContact.canceled -= instance.OnOnSecondFingerContact;
        }

        public void RemoveCallbacks(ITouchscreenActions instance)
        {
            if (m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchscreenActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchscreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchscreenActions @Touchscreen => new TouchscreenActions(this);
    public interface ITouchscreenActions
    {
        void OnFirstFingerPosition(InputAction.CallbackContext context);
        void OnSecondFingerPosition(InputAction.CallbackContext context);
        void OnOnSecondFingerContact(InputAction.CallbackContext context);
    }
}
